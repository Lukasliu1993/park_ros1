#include <sensor_msgs/msg/laser_scan.hpp>
#include <laser_geometry/laser_geometry.hpp>


using laser_geometry::LaserProjection;
LaserProjection laserscan2pointcloud_converter_;





Eigen::Affine3f isometry = tf2::transformToEigen(transform_stamped.transform).cast<float>();
  pcl::PointCloud<pcl::PointXYZ> pcl;
  sensor_msgs::msg::PointCloud2::SharedPtr pointcloud2 = std::make_shared<sensor_msgs::msg::PointCloud2>();
  pointcloud2->header = laserscan_ptr_->header;
  laserscan2pointcloud_converter_.transformLaserScanToPointCloud(
    laserscan_ptr_->header.frame_id, *laserscan_ptr_, *pointcloud2, tf_buffer_);
  pcl::fromROSMsg(*pointcloud2, pcl);
  pcl::transformPointCloud(pcl, pcl, isometry);
