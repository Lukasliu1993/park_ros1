# ns : local_costmap

# The global frame for the costmap to operate in. (string, default: "/map")
global_frame: odom

# The name of the frame for the base link of the robot.(string, default: "base_link")
robot_base_frame: base_link

# distance a circular robot should be clear of the obstacle (kobuki: 0.18)
#robot_radius: 0.20  
footprint: [[0.37, 0.31], [0.37, -0.31], [-0.37, -0.31], [-0.37, 0.31]]  # if the robot is not circular

# used for obstacle_layer, 3D->voxel 2D->other
# map_type: costmap

# Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot.(double, default: 0.2)
transform_tolerance: 0.5

# The frequency in Hz for the map to be updated.(double, default: 5.0)
update_frequency: 5.0

# The frequency in Hz for the map to be publish display information.(double, default: 0.0)
publish_frequency: 1.0

# Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false. (bool, default: false)
rolling_window: true
# static_map: false

# If true the full costmap is published to "~<name>/grid" every update. If false only the part of the costmap that has changed is published on the "~<name>/grid_updates" topic. (bool, default: false)
always_send_full_costmap: false

# Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields. The name is used to define the parameter namespace for the plugin.
plugins:
  - {name: obstacle_layer,          type: "costmap_2d::ObstacleLayer"}
  - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}

# The width of the map in meters.(int, default: 10)
width: 5.0

# The height of the map in meters.(int, default: 10)
height: 5.0

# The resolution of the map in meters/cell. (double, default: 0.05)
resolution: 0.1

# The x origin of the map in the global frame in meters. (double, default: 0.0)
origin_x: 0.0

# The y origin of the map in the global frame in meters. (double, default: 0.0)
origin_y: 0.0

#############################
#
#        inflation_layer
#
#############################
inflation_layer:
# The radius in meters to which the map inflates obstacle cost values. (double, default: 0.55)
  inflation_radius: 0.20

# A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values. (double, default: 10.0)
  cost_scaling_factor: 10.0

#############################
#
#      obstacle_layer
#
#############################
obstacle_layer:
# The maximum height of any obstacle to be inserted into the costmap in meters. This parameter should be set to be slightly higher than the height of your robot. (double, default: 2.0)
  max_obstacle_height: 2.0
# The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis. (double, default: 2.5)
  obstacle_range: 3.0
# The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis. (double, default: 3.0)
  raytrace_range: 4.0
# If false, each pixel has one of 2 states: lethal obstacle or free. If true, each pixel has one of 3 states: lethal obstacle, free, or unknown.  (bool, default: false)
  track_unknown_space: false
# If true, the robot footprint will clear (mark as free) the space in which it travels. (bool, default: true)
  footprint_clearing_enabled: true
# A list of observation source names separated by spaces. This defines each of the <source_name> namespaces defined below. (string, default: "")
  observation_sources: camera
  camera: {
    sensor_frame: camera_rgb_optical_frame,
    data_type: PointCloud2,
    topic: camera/depth/points,
    marking: true,
    clearing: true,
    expected_update_rate: 0.0,
    observation_persistence: 0.0,
    max_obstacle_height: 2.5,
    min_obstacle_height: -0.5,
    min_obstacle_marking_height: 0.4
  }
  # observation_sources: rslidar
  # rslidar: {
  #   sensor_frame: rslidar,
  #   data_type: PointCloud2,
  #   topic: /rslidar_points,
  #   marking: true,
  #   clearing: true,
  #   expected_update_rate: 0.0,
  #   observation_persistence: 0.0,
  #   max_obstacle_height: 2.5,
  #   min_obstacle_height: -0.5,
  #   min_obstacle_marking_height: 0.4
  # }


